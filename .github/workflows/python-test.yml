name: Python Test and Coverage

on: [push, pull_request]

permissions:
  contents: read # Required for checkout
  # Potentially add other permissions if coverage needs to be written back to PRs/commits

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"] # Test on relevant Python versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]  # Installs project + dev dependencies from pyproject.toml

    - name: Install Playwright browsers
      run: python -m playwright install --with-deps chromium

    - name: Run tests and generate coverage
      run: |
        python -m pytest --cov=quandex_core --cov-report=xml --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Optional: if using private repo or Codecov token
        files: ./coverage.xml # Path to coverage file
        fail_ci_if_error: true # Optional: fail CI if Codecov upload error
      # Note: For coverage threshold enforcement, Codecov itself can be configured,
      # or a separate step/script can parse coverage.xml and fail the job.
      # For simplicity here, we'll rely on Codecov's UI/settings for threshold.
      # If direct threshold failure in CI is needed without Codecov enterprise,
      # a custom script would be required after pytest. Example:
      #   pip install coverage
      #   coverage report --fail-under=80

    # Example for failing CI if coverage is below threshold (using coverage package)
    # This step should run after tests and coverage generation
    - name: Check coverage threshold
      if: always() # Ensure this runs even if previous steps fail (e.g. tests fail)
      run: |
        pip install coverage
        coverage xml # Ensure coverage.xml is up-to-date if not already generated by pytest
        MIN_COVERAGE=80
        COVERAGE_PERCENTAGE=$(coverage report --format=total)
        # Clean up COVERAGE_PERCENTAGE to be just the number
        COVERAGE_PERCENTAGE_CLEANED=$(echo $COVERAGE_PERCENTAGE | sed 's/%//')
        if (( $(echo "$COVERAGE_PERCENTAGE_CLEANED < $MIN_COVERAGE" | bc -l) )); then
          echo "Coverage is below $MIN_COVERAGE%. Actual: $COVERAGE_PERCENTAGE_CLEANED%"
          exit 1
        else
          echo "Coverage is $COVERAGE_PERCENTAGE_CLEANED%, which meets the $MIN_COVERAGE% threshold."
        fi
